AWSTemplateFormatVersion: '2010-09-09'
Description: 'Personal AI Agent - Serverless Infrastructure with E2E Encryption'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment name

Resources:
  # KMS Key for encryption
  EncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for PAI encryption
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow Lambda to use the key
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'kms:Decrypt'
              - 'kms:Encrypt'
              - 'kms:GenerateDataKey'
            Resource: '*'

  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/pai-${Environment}'
      TargetKeyId: !Ref EncryptionKey

  # S3 Bucket for knowledge base and file storage
  KnowledgeBaseBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'pai-knowledge-base-${AWS::AccountId}-${Environment}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID: !Ref EncryptionKey
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: IntelligentTiering
            Status: Enabled
            Transitions:
              - TransitionInDays: 0
                StorageClass: INTELLIGENT_TIERING

  # DynamoDB Table for short-term memory (conversations)
  ShortTermMemoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'pai-conversations-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref EncryptionKey
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: ttl
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # DynamoDB Table for long-term memory (vector embeddings)
  LongTermMemoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'pai-knowledge-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: category
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CategoryIndex
          KeySchema:
            - AttributeName: category
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref EncryptionKey
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'pai-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: PAILambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                Resource:
                  - !GetAtt ShortTermMemoryTable.Arn
                  - !GetAtt LongTermMemoryTable.Arn
                  - !Sub '${ShortTermMemoryTable.Arn}/index/*'
                  - !Sub '${LongTermMemoryTable.Arn}/index/*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:ListBucket'
                Resource:
                  - !GetAtt KnowledgeBaseBucket.Arn
                  - !Sub '${KnowledgeBaseBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                  - 'kms:Encrypt'
                  - 'kms:GenerateDataKey'
                  - 'kms:DescribeKey'
                Resource: !GetAtt EncryptionKey.Arn
              - Effect: Allow
                Action:
                  - 'bedrock:InvokeModel'
                  - 'bedrock:InvokeModelWithResponseStream'
                Resource:
                  - 'arn:aws:bedrock:*::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0'
                  - 'arn:aws:bedrock:*::foundation-model/amazon.titan-embed-text-v1'
                  - 'arn:aws:bedrock:*::foundation-model/amazon.titan-embed-text-v2:0'

  # Lambda Layer for shared dependencies
  DependenciesLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub 'pai-dependencies-${Environment}'
      Description: Shared dependencies for PAI Lambda functions
      ContentUri: ../dist/layer.zip
      CompatibleRuntimes:
        - nodejs20.x
      CompatibleArchitectures:
        - arm64

  # Lambda Function - Chat Handler
  ChatFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'pai-chat-${Environment}'
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - arm64
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Chat function placeholder' })
            };
          };
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          SHORT_TERM_TABLE: !Ref ShortTermMemoryTable
          LONG_TERM_TABLE: !Ref LongTermMemoryTable
          KNOWLEDGE_BUCKET: !Ref KnowledgeBaseBucket
          KMS_KEY_ID: !Ref EncryptionKey
      MemorySize: 512
      Timeout: 30
      ReservedConcurrentExecutions: 5

  # Lambda Function - Memory Manager
  MemoryFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'pai-memory-${Environment}'
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - arm64
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Memory function placeholder' })
            };
          };
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          SHORT_TERM_TABLE: !Ref ShortTermMemoryTable
          LONG_TERM_TABLE: !Ref LongTermMemoryTable
          KNOWLEDGE_BUCKET: !Ref KnowledgeBaseBucket
          KMS_KEY_ID: !Ref EncryptionKey
      MemorySize: 1024
      Timeout: 60
      ReservedConcurrentExecutions: 2

  # Lambda Function - Vector Search
  VectorSearchFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'pai-vector-search-${Environment}'
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - arm64
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Vector search function placeholder' })
            };
          };
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          LONG_TERM_TABLE: !Ref LongTermMemoryTable
          KNOWLEDGE_BUCKET: !Ref KnowledgeBaseBucket
          KMS_KEY_ID: !Ref EncryptionKey
      MemorySize: 2048
      Timeout: 60
      ReservedConcurrentExecutions: 2

  # HTTP API Gateway (cheaper than REST API)
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'pai-api-${Environment}'
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
        AllowHeaders:
          - '*'

  # API Gateway Stage
  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: !Ref Environment
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '$context.requestId $context.error.message $context.error.messageString'

  # CloudWatch Log Group for API
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/pai-${Environment}'
      RetentionInDays: 7

  # Lambda Permissions for API Gateway
  ChatFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ChatFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'

  MemoryFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MemoryFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'

  VectorSearchFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref VectorSearchFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'

  # API Routes and Integrations
  ChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt ChatFunction.Arn
      PayloadFormatVersion: '2.0'

  ChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /chat'
      Target: !Sub 'integrations/${ChatIntegration}'

  MemoryIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt MemoryFunction.Arn
      PayloadFormatVersion: '2.0'

  MemoryRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /memory'
      Target: !Sub 'integrations/${MemoryIntegration}'

  VectorSearchIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt VectorSearchFunction.Arn
      PayloadFormatVersion: '2.0'

  VectorSearchRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /search'
      Target: !Sub 'integrations/${VectorSearchIntegration}'

Outputs:
  ApiEndpoint:
    Description: HTTP API Gateway endpoint URL
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  ShortTermMemoryTableName:
    Description: Short-term memory DynamoDB table name
    Value: !Ref ShortTermMemoryTable
    Export:
      Name: !Sub '${AWS::StackName}-ShortTermMemoryTable'

  LongTermMemoryTableName:
    Description: Long-term memory DynamoDB table name
    Value: !Ref LongTermMemoryTable
    Export:
      Name: !Sub '${AWS::StackName}-LongTermMemoryTable'

  KnowledgeBaseBucketName:
    Description: S3 bucket for knowledge base
    Value: !Ref KnowledgeBaseBucket
    Export:
      Name: !Sub '${AWS::StackName}-KnowledgeBaseBucket'

  EncryptionKeyId:
    Description: KMS key ID for encryption
    Value: !Ref EncryptionKey
    Export:
      Name: !Sub '${AWS::StackName}-EncryptionKeyId'

  EncryptionKeyArn:
    Description: KMS key ARN for encryption
    Value: !GetAtt EncryptionKey.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EncryptionKeyArn'
