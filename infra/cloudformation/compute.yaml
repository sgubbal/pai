AWSTemplateFormatVersion: '2010-09-09'
Description: 'Personal AI Chatbot - Compute Stack (Lambda, API Gateway)'

Parameters:
  Environment:
    Type: String
  EnableRAG:
    Type: String
  LambdaExecutionRoleArn:
    Type: String
  ConversationsTableName:
    Type: String
  DocumentsBucketName:
    Type: String
    Default: ""
  VectorSearchEndpoint:
    Type: String
    Default: ""
  KMSKeyId:
    Type: String

Conditions:
  IsRAGEnabled: !Equals [!Ref EnableRAG, "true"]

Resources:
  #######################
  # Lambda - Chat Handler (Phase 1)
  #######################
  ChatHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'chatbot-chat-${Environment}'
      Runtime: python3.12
      Handler: handler.lambda_handler
      Role: !Ref LambdaExecutionRoleArn
      Architectures:
        - arm64
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          CONVERSATIONS_TABLE: !Ref ConversationsTableName
          KMS_KEY_ID: !Ref KMSKeyId
          AI_MODEL_ID: 'anthropic.claude-3-5-sonnet-20241022-v2:0'
          ENABLE_RAG: !Ref EnableRAG
          DOCUMENTS_BUCKET: !Ref DocumentsBucketName
          VECTOR_SEARCH_ENDPOINT: !Ref VectorSearchEndpoint
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps({'message': 'Chatbot placeholder - deploy code with package-lambdas.sh'})
              }
      Tags:
        - Key: Environment
          Value: !Ref Environment

  #######################
  # Lambda - Ingestion Handler (Phase 2)
  #######################
  IngestionHandlerFunction:
    Type: AWS::Lambda::Function
    Condition: IsRAGEnabled
    Properties:
      FunctionName: !Sub 'chatbot-ingestion-${Environment}'
      Runtime: python3.12
      Handler: ingestion_handler.lambda_handler
      Role: !Ref LambdaExecutionRoleArn
      Architectures:
        - arm64
      MemorySize: 1024
      Timeout: 300
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DOCUMENTS_BUCKET: !Ref DocumentsBucketName
          VECTOR_SEARCH_ENDPOINT: !Ref VectorSearchEndpoint
          KMS_KEY_ID: !Ref KMSKeyId
          EMBEDDING_MODEL_ID: 'amazon.titan-embed-text-v2:0'
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps({'message': 'Ingestion placeholder'})}
      Tags:
        - Key: Environment
          Value: !Ref Environment

  #######################
  # API Gateway HTTP API
  #######################
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'chatbot-api-${Environment}'
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST
          - OPTIONS
        AllowHeaders:
          - '*'
        MaxAge: 300
      Tags:
        Environment: !Ref Environment

  ChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatHandlerFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  ChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /chat'
      Target: !Sub 'integrations/${ChatIntegration}'

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: !Ref Environment
      AutoDeploy: true

  ChatLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ChatHandlerFunction
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'

Outputs:
  ApiEndpoint:
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  ChatFunctionName:
    Value: !Ref ChatHandlerFunction
    Export:
      Name: !Sub '${AWS::StackName}-ChatFunction'

  IngestionFunctionName:
    Condition: IsRAGEnabled
    Value: !Ref IngestionHandlerFunction
    Export:
      Name: !Sub '${AWS::StackName}-IngestionFunction'
