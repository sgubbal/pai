AWSTemplateFormatVersion: '2010-09-09'
Description: 'Personal AI Chatbot - Main Orchestrator Stack'

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Deployment environment
    AllowedValues:
      - dev
      - staging
      - prod

  EnableRAG:
    Type: String
    Default: "false"
    Description: Enable RAG (Retrieval Augmented Generation) features
    AllowedValues:
      - "true"
      - "false"

Conditions:
  IsRAGEnabled: !Equals [!Ref EnableRAG, "true"]

Resources:
  #######################
  # Security Stack
  #######################
  SecurityStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./security.yaml
      Parameters:
        Environment: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: PersonalAIChatbot

  #######################
  # Storage Stack
  #######################
  StorageStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: SecurityStack
    Properties:
      TemplateURL: ./storage.yaml
      Parameters:
        Environment: !Ref Environment
        EnableRAG: !Ref EnableRAG
        KMSKeyId: !GetAtt SecurityStack.Outputs.KMSKeyId
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: PersonalAIChatbot

  #######################
  # AI Stack (OpenSearch - Phase 2)
  #######################
  AIStack:
    Type: AWS::CloudFormation::Stack
    Condition: IsRAGEnabled
    DependsOn: SecurityStack
    Properties:
      TemplateURL: ./ai.yaml
      Parameters:
        Environment: !Ref Environment
        LambdaExecutionRoleArn: !GetAtt SecurityStack.Outputs.LambdaExecutionRoleArn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: PersonalAIChatbot

  #######################
  # Compute Stack
  #######################
  ComputeStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - SecurityStack
      - StorageStack
    Properties:
      TemplateURL: ./compute.yaml
      Parameters:
        Environment: !Ref Environment
        EnableRAG: !Ref EnableRAG
        LambdaExecutionRoleArn: !GetAtt SecurityStack.Outputs.LambdaExecutionRoleArn
        ConversationsTableName: !GetAtt StorageStack.Outputs.ConversationsTableName
        DocumentsBucketName: !If
          - IsRAGEnabled
          - !GetAtt StorageStack.Outputs.DocumentsBucketName
          - ""
        VectorSearchEndpoint: !If
          - IsRAGEnabled
          - !GetAtt AIStack.Outputs.VectorSearchEndpoint
          - ""
        KMSKeyId: !GetAtt SecurityStack.Outputs.KMSKeyId
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: PersonalAIChatbot

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !GetAtt ComputeStack.Outputs.ApiEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  ConversationsTableName:
    Description: DynamoDB conversations table name
    Value: !GetAtt StorageStack.Outputs.ConversationsTableName

  ChatFunctionName:
    Description: Chat handler Lambda function name
    Value: !GetAtt ComputeStack.Outputs.ChatFunctionName

  DocumentsBucketName:
    Condition: IsRAGEnabled
    Description: S3 bucket for documents (Phase 2)
    Value: !GetAtt StorageStack.Outputs.DocumentsBucketName

  VectorSearchEndpoint:
    Condition: IsRAGEnabled
    Description: OpenSearch Serverless endpoint (Phase 2)
    Value: !GetAtt AIStack.Outputs.VectorSearchEndpoint

  QuickStartGuide:
    Description: Quick start guide
    Value: !Sub |
      Personal AI Chatbot deployed successfully!

      Environment: ${Environment}
      RAG Enabled: ${EnableRAG}

      API Endpoint: ${ComputeStack.Outputs.ApiEndpoint}

      Test the chatbot:
      curl -X POST ${ComputeStack.Outputs.ApiEndpoint}/chat \
        -H "Content-Type: application/json" \
        -d '{"conversation_id": "test-123", "message": "Hello!"}'

      View logs:
      aws logs tail /aws/lambda/${ComputeStack.Outputs.ChatFunctionName} --follow

      ${EnableRAG == "true" ? "Upload documents (RAG enabled):" : ""}
      ${EnableRAG == "true" ? "aws s3 cp my_document.pdf s3://" + StorageStack.Outputs.DocumentsBucketName + "/" : ""}
