name: Deploy PAI Chatbot

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.12'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run linting
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests
        run: |
          pytest tests/ -v --cov=src --cov-report=term-missing

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Determine environment
        id: determine-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update parameter file with secrets
        run: |
          ENV=${{ steps.determine-env.outputs.environment }}
          jq --arg key "${{ secrets.API_KEY }}" \
             --arg bucket "${{ secrets.S3_BUCKET_NAME }}" \
             '(.[] | select(.ParameterKey=="ApiKeyValue") | .ParameterValue) = $key |
              (.[] | select(.ParameterKey=="S3BucketName") | .ParameterValue) = $bucket' \
             infrastructure/parameters/${ENV}.json > infrastructure/parameters/${ENV}.tmp.json
          mv infrastructure/parameters/${ENV}.tmp.json infrastructure/parameters/${ENV}.json

      - name: Deploy to AWS
        run: |
          ENV=${{ steps.determine-env.outputs.environment }}
          bash ./scripts/deploy.sh $ENV

      - name: Get API endpoint
        id: get-endpoint
        run: |
          ENV=${{ steps.determine-env.outputs.environment }}
          ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name pai-chatbot-${ENV} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
            --output text)
          echo "endpoint=$ENDPOINT" >> $GITHUB_OUTPUT

      - name: Deployment summary
        run: |
          echo "### Deployment Successful! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ steps.determine-env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**API Endpoint:** ${{ steps.get-endpoint.outputs.endpoint }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test the API:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "curl -X POST ${{ steps.get-endpoint.outputs.endpoint }}/chat \\" >> $GITHUB_STEP_SUMMARY
          echo "  -H 'Authorization: Bearer YOUR_API_KEY' \\" >> $GITHUB_STEP_SUMMARY
          echo "  -H 'Content-Type: application/json' \\" >> $GITHUB_STEP_SUMMARY
          echo "  -d '{\"message\": \"Hello\"}'" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
